// controllers/stream.controller.js
const StreamCall = require('../models/call.model');
const User = require('../models/user.model');
const { StreamChat } = require('stream-chat');
const Chat = require('../models/chat.model'); 
const { StreamClient } = require('@stream-io/node-sdk');
const crypto = require('crypto');

// Kh·ªüi t·∫°o Stream clients
const streamApiKey = process.env.STREAM_API_KEY;
const streamApiSecret = process.env.STREAM_API_SECRET;
const serverClient = new StreamClient(streamApiKey, streamApiSecret);
// T·∫°o Stream token
const generateStreamToken = async (req, res) => {
  try {
    const userId = req.user._id.toString();
    
    // T·∫°o token cho ng∆∞·ªùi d√πng
    const token = serverClient.createToken(userId);
    
    res.status(200).json({ token });
  } catch (error) {
    console.error('Error generating Stream token:', error);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ t·∫°o Stream token' });
  }
};

// Th√™m h√†m m·ªõi ƒë·ªÉ t·∫°o group call
const createGroupCall = async (req, res) => {
  try {
    const { chatId, callType = 'video' } = req.body;
    const initiatorId = req.user._id;
    
    // Ki·ªÉm tra group chat c√≥ t·ªìn t·∫°i kh√¥ng
    const chat = await Chat.findOne({ chatId, isGroupChat: true });
    if (!chat) {
      return res.status(404).json({ message: 'Group chat kh√¥ng t·ªìn t·∫°i' });
    }
    
    // Ki·ªÉm tra ng∆∞·ªùi g·ªçi c√≥ ph·∫£i l√† th√†nh vi√™n c·ªßa group kh√¥ng
    if (!chat.participants.includes(initiatorId)) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o cu·ªôc g·ªçi trong group n√†y' });
    }
    
    // T·∫°o ID cu·ªôc g·ªçi ng·∫´u nhi√™n
    const callId = crypto.randomBytes(16).toString('hex');
    
    // T·∫°o b·∫£n ghi cu·ªôc g·ªçi m·ªõi
    const newCall = new StreamCall({
      callId,
      initiator: initiatorId,
      participants: chat.participants,
      chatId,
      callType,
      isGroupCall: true
    });
    
    await newCall.save();
    
    res.status(201).json({
      callId,
      callType,
      isGroupCall: true,
      participants: chat.participants,
      groupName: chat.groupName,
      message: 'Group call ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('Error creating group call:', error);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ t·∫°o group call' });
  }
};

// T·∫°o cu·ªôc g·ªçi m·ªõi
const createCall = async (req, res) => {
  try {
    const { participantIds, chatId } = req.body;
    const initiatorId = req.user._id;
    
    // T·∫°o ID cu·ªôc g·ªçi ng·∫´u nhi√™n
    const callId = crypto.randomBytes(16).toString('hex');
    
    // T·∫°o b·∫£n ghi cu·ªôc g·ªçi m·ªõi
    const newCall = new StreamCall({
      callId,
      initiator: initiatorId,
      participants: [...participantIds, initiatorId],
      chatId
    });
    
    await newCall.save();
    
    res.status(201).json({ 
      callId,
      message: 'Cu·ªôc g·ªçi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('Error creating call:', error);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ t·∫°o cu·ªôc g·ªçi' });
  }
};

// K·∫øt th√∫c cu·ªôc g·ªçi
// ‚úÖ S·ª≠a l·∫°i endCall function
const endCall = async (req, res) => {
  try {
    const { callId } = req.params;
    
   // ‚úÖ Populate participants v·ªõi User model ƒë√£ ƒë∆∞·ª£c import
    const call = await StreamCall.findOne({ callId }).populate('participants', '_id name avatar');

    if (!call) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y cu·ªôc g·ªçi' });
    }

    // Ki·ªÉm tra call ƒë√£ k·∫øt th√∫c ch∆∞a
    if (call.status === 'ended') {
      return res.status(200).json({ message: 'Cu·ªôc g·ªçi ƒë√£ ƒë∆∞·ª£c k·∫øt th√∫c tr∆∞·ªõc ƒë√≥' });
    }

    call.status = 'ended';
    call.endTime = new Date();
    
    // ‚úÖ Ki·ªÉm tra startTime
    if (call.startTime) {
      call.duration = Math.floor((call.endTime - call.startTime) / 1000);
    } else {
      call.duration = 0;
      call.startTime = call.createdAt || call.endTime;
    }
    
    await call.save();

    // ‚úÖ Th√¥ng b√°o cho T·∫§T C·∫¢ participants qua socket
    const io = req.app.get('io');
    const onlineUsers = req.app.get('onlineUsers');
    
    if (io && call.participants) {
      console.log("üìã Sending call_ended to participants:", call.participants);
      
      call.participants.forEach(participant => {
        const participantId = participant._id ? participant._id.toString() : participant.toString();
        const targetSocketId = onlineUsers.get(participantId);
        
        if (targetSocketId) {
          console.log(`üì§ API: G·ª≠i call_ended ƒë·∫øn user ${participantId}`);
          io.to(targetSocketId).emit('call_ended', {
            callId,
            endedBy: req.user._id,
            message: 'Cu·ªôc g·ªçi ƒë√£ k·∫øt th√∫c'
          });
        } else {
          console.log(`‚ùå API: Kh√¥ng t√¨m th·∫•y socket c·ªßa user ${participantId}`);
        }
      });
    }

    res.status(200).json({ message: 'Cu·ªôc g·ªçi ƒë√£ k·∫øt th√∫c' });
  } catch (error) {
    console.error('Error ending call:', error);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ k·∫øt th√∫c cu·ªôc g·ªçi' });
  }
};


// L·∫•y l·ªãch s·ª≠ cu·ªôc g·ªçi
const getCallHistory = async (req, res) => {
  try {
    const userId = req.user._id;
    
    const calls = await StreamCall.find({
      participants: userId
    })
    .populate('initiator', 'name avatar')
    .populate('participants', 'name avatar')
    .sort({ createdAt: -1 });
    
    res.status(200).json(calls);
  } catch (error) {
    console.error('Error fetching call history:', error);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ cu·ªôc g·ªçi' });
  }
};

module.exports = {
  generateStreamToken,
  createCall,
  endCall,
  getCallHistory,
  createGroupCall
};